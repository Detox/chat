// Generated by LiveScript 1.5.0
/**
 * @package Detox chat
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  var APPLICATION, APPLICATION_STRING, COMMAND_DIRECT_CONNECTION_SDP, COMMAND_SECRET_UPDATE, COMMAND_NICKNAME, COMMAND_TEXT_MESSAGE, COMMAND_TEXT_MESSAGE_RECEIVED;
  APPLICATION = Uint8Array.of(100, 101, 116, 111, 120, 45, 99, 104, 97, 116, 45, 118, 48);
  APPLICATION_STRING = APPLICATION.join(',');
  COMMAND_DIRECT_CONNECTION_SDP = 0;
  COMMAND_SECRET_UPDATE = 1;
  COMMAND_NICKNAME = 2;
  COMMAND_TEXT_MESSAGE = 3;
  COMMAND_TEXT_MESSAGE_RECEIVED = 4;
  function Wrapper(detoxCore, detoxCrypto, detoxUtils, fixedSizeMultiplexer, asyncEventer){
    var string2array, are_arrays_equal;
    string2array = detoxUtils['string2array'];
    are_arrays_equal = detoxUtils['are_arrays_equal'];
    /**
     * @constructor
     *
     * @param {!Object}		core_instance					Detox core instance
     * @param {Uint8Array=}	real_key_seed					Seed used to generate real long-term keypair (if not specified - random one is used)
     * @param {string=}		nickname						User nickname that will be shown to the friend
     * @param {number=}		number_of_introduction_nodes	Number of introduction nodes used for announcement to the network
     * @param {number=}		number_of_intermediate_nodes	How many hops should be made when making connections
     *
     * @return {!Chat}
     */
    function Chat(core_instance, real_key_seed, name, number_of_introduction_nodes, number_of_intermediate_nodes){
      var this$ = this;
      real_key_seed == null && (real_key_seed = null);
      name == null && (name = '');
      number_of_introduction_nodes == null && (number_of_introduction_nodes = 3);
      number_of_intermediate_nodes == null && (number_of_intermediate_nodes = 3);
      if (!(this instanceof Chat)) {
        return new Chat(core_instance, real_key_seed, name, number_of_introduction_nodes, number_of_intermediate_nodes);
      }
      asyncEventer.call(this);
      this._core_instance = core_instance;
      this._real_key_seed = real_key_seed || detoxCore['generate_seed']();
      this._real_keypair = detoxCore['create_keypair'](this._real_key_seed);
      this._nickname = string2array(nickname);
      this._number_of_introduction_nodes = number_of_introduction_nodes;
      this._number_of_intermediate_nodes = number_of_intermediate_nodes;
      this._connected_nodes = new Map;
      this._core_instance['once']('announced', function(real_public_key){
        if (!this$._is_current_chat(real_public_key)) {
          return;
        }
        this$['fire']('announced');
      })['on']('connected', function(real_public_key, friend_id){
        if (!this$._is_current_chat(real_public_key)) {
          return;
        }
        this$._connected_nodes.set(friend_id.join(','), friend_id);
        this$['fire']('connected', friend_id);
      })['on']('connection_progress', function(real_public_key, friend_id, stage){
        if (!this$._is_current_chat(real_public_key)) {
          return;
        }
        this$['fire']('connection_progress', friend_id, stage);
      })['on']('connection_failed', function(real_public_key, friend_id, reason){
        if (!this$._is_current_chat(real_public_key)) {
          return;
        }
        this$['fire']('connection_failed', friend_id, reason);
      })['on']('disconnected', function(real_public_key, friend_id){
        if (!this$._is_current_chat(real_public_key)) {
          return;
        }
        this$._connected_nodes['delete'](friend_id.join(','));
        this$['fire']('disconnected', friend_id);
      })['on']('introduction', function(data){
        if (!(this$._is_current_chat(real_public_key) && is_string_equal_to_array(APPLICATION_STRING, data['application'].subarray(0, APPLICATION.length)))) {
          return;
        }
        this$['fire']('introduction', data['target_id'], data['secret']).then(function(){
          data['number_of_intermediate_nodes'] = Math.max(this$._number_of_intermediate_nodes - 1, 1);
        });
      })['on']('data', function(real_public_key, friend_id, received_command, received_data){
        if (!this$._is_current_chat(real_public_key)) {
          return;
        }
      });
    }
    Cache['CONNECTION_ERROR_CANT_FIND_INTRODUCTION_NODES'] = detoxCore['CONNECTION_ERROR_CANT_FIND_INTRODUCTION_NODES'];
    Cache['CONNECTION_ERROR_NOT_ENOUGH_INTERMEDIATE_NODES'] = detoxCore['CONNECTION_ERROR_NOT_ENOUGH_INTERMEDIATE_NODES'];
    Cache['CONNECTION_ERROR_NO_INTRODUCTION_NODES'] = detoxCore['CONNECTION_ERROR_NO_INTRODUCTION_NODES'];
    Cache['CONNECTION_ERROR_CANT_CONNECT_TO_RENDEZVOUS_POINT'] = detoxCore['CONNECTION_ERROR_CANT_CONNECT_TO_RENDEZVOUS_POINT'];
    Cache['CONNECTION_ERROR_OUT_OF_INTRODUCTION_NODES'] = detoxCore['CONNECTION_ERROR_OUT_OF_INTRODUCTION_NODES'];
    Cache['CONNECTION_PROGRESS_CONNECTED_TO_RENDEZVOUS_NODE'] = detoxCore['CONNECTION_PROGRESS_CONNECTED_TO_RENDEZVOUS_NODE'];
    Cache['CONNECTION_PROGRESS_FOUND_INTRODUCTION_NODES'] = detoxCore['CONNECTION_PROGRESS_FOUND_INTRODUCTION_NODES'];
    Cache['CONNECTION_PROGRESS_INTRODUCTION_SENT'] = detoxCore['CONNECTION_PROGRESS_INTRODUCTION_SENT'];
    Chat.prototype = {
      /**
       * Announce itself to the network (can operate without announcement)
       */
      'announce': function(){
        if (this._announced || this._destroyed) {
          return;
        }
        this._announced = true;
        this._core_instance['announce'](this._real_key_seed, this._number_of_introduction_nodes, Math.max(this._number_of_intermediate_nodes - 1, 1));
      }
      /**
       * @param {!Uint8Array} friend_id	Ed25519 public key of a friend
       * @param {!uint8Array} secret		Secret used for connection to a friend
       */,
      'connect_to': function(friend_id, secret){
        if (this._destroyed || this._connected_nodes.has(friend_id.join(','))) {
          return;
        }
        this._core_instance['connect_to'](this._real_key_seed, friend_id, APPLICATION, secret, this._number_of_intermediate_nodes);
      },
      'send_to': function(friend_id){},
      'destroy': function(){
        if (this._destroyed) {
          return;
        }
        this._destroyed = true;
      }
      /**
       * @param {!Uint8Array} real_public_key
       *
       * @return {boolean}
       */,
      _is_current_chat: function(real_public_key){
        return are_arrays_equal(this._real_keypair['ed25519']['public'], real_public_key);
      }
    };
    Chat.prototype = Object.assign(Object.create(asyncEventer.prototype), Chat.prototype);
    Object.defineProperty(Chat.prototype, 'constructor', {
      enumerable: false,
      value: Chat
    });
    return {
      'ready': function(callback){
        var wait_for;
        wait_for = 2;
        function ready(){
          --wait_for;
          if (!wait_for) {
            callback();
          }
        }
        detoxCore['ready'](ready);
        detoxCrypto['ready'](ready);
      },
      'Chat': Chat
    };
  }
  if (typeof define === 'function' && define['amd']) {
    define(['@detox/core', '@detox/crypto', '@detox/utils', 'fixed-size-multiplexer', 'async-eventer'], Wrapper);
  } else if (typeof exports === 'object') {
    module.exports = Wrapper(require('@detox/core'), require('@detox/crypto'), require('@detox/utils'), require('fixed-size-multiplexer'), require('async-eventer'));
  } else {
    this['detox_chat'] = Wrapper(this['detox_core'], this['detox_crypto'], this['detox_utils'], this['fixed_size_multiplexer'], this['async_eventer']);
  }
}).call(this);
