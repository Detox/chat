// Generated by LiveScript 1.5.0
/**
 * @package Detox chat
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  var detoxCore, NUMBER_OF_NODES, bootstrap_node_id, bootstrap_ip, bootstrap_port, bootstrap_node_info;
  detoxCore = require('@detox/core');
  NUMBER_OF_NODES = 50;
  bootstrap_node_id = '3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29';
  bootstrap_ip = '127.0.0.1';
  bootstrap_port = 16882;
  bootstrap_node_info = bootstrap_node_id + ":" + bootstrap_ip + ":" + bootstrap_port;
  detoxCore.ready(function(){
    var wait_for, options, promise, i$, to$;
    global.nodes = [];
    wait_for = NUMBER_OF_NODES;
    options = {
      connected_nodes_limit: 30,
      lookup_number: 3
    };
    promise = Promise.resolve();
    for (i$ = 0, to$ = NUMBER_OF_NODES; i$ < to$; ++i$) {
      (fn$.call(this, i$));
    }
    function ready_callback(){
      console.log("All nodes are ready, connect to bootstrap node using " + bootstrap_node_id + ":" + bootstrap_ip + ":" + bootstrap_port);
    }
    function fn$(i){
      promise = promise.then(function(){
        return new Promise(function(resolve){
          var instance;
          if (i === 0) {
            instance = detoxCore.Core([], [], 5, 20, Object.assign({}, options, {
              connected_nodes_limit: NUMBER_OF_NODES
            }));
            instance.start_bootstrap_node(new Uint8Array(32), bootstrap_ip, bootstrap_port);
          } else {
            instance = detoxCore.Core([bootstrap_node_info], [], 5, 2, options);
          }
          instance.once('ready', function(){
            console.log('Node ' + i + ' is ready, #' + (NUMBER_OF_NODES - wait_for + 1) + '/' + NUMBER_OF_NODES);
            --wait_for;
            if (!wait_for) {
              ready_callback();
            }
          });
          nodes.push(instance);
          setTimeout(resolve, 100);
        });
      });
    }
  });
}).call(this);
